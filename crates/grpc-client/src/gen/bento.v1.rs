// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Input {
    /// Identifier for the input, e.g., a UUID or hash.
    #[prost(string, tag = "1")]
    pub id: ::prost::alloc::string::String,
    /// The actual input data.
    #[prost(bytes = "vec", tag = "2")]
    pub data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct RequestTaskRequest {
    /// Identifier for the client worker. Can be used for logging, metrics, or client-specific logic.
    ///
    /// in MB
    #[prost(uint64, tag = "1")]
    pub gpu_memory: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct TaskAssignment {
    /// Unique ID for this specific task assignment. Client must use this ID in subsequent calls for this task.
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
    #[prost(oneof = "task_assignment::TaskDetails", tags = "2, 3")]
    pub task_details: ::core::option::Option<task_assignment::TaskDetails>,
}
/// Nested message and enum types in `TaskAssignment`.
pub mod task_assignment {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum TaskDetails {
        #[prost(message, tag = "2")]
        StarkTask(super::StarkTaskDetails),
        #[prost(message, tag = "3")]
        Groth16Task(super::Groth16TaskDetails),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct StarkTaskDetails {
    /// Identifier for the ELF image (e.g., its computed image_id).
    #[prost(string, tag = "1")]
    pub image_id: ::prost::alloc::string::String,
    /// The ELF image bytes.
    #[prost(bytes = "vec", tag = "2")]
    pub elf_data: ::prost::alloc::vec::Vec<u8>,
    /// The primary input for the task.
    #[prost(message, optional, tag = "3")]
    pub input_data: ::core::option::Option<Input>,
    /// Any additional inputs required for assumptions.
    #[prost(message, repeated, tag = "4")]
    pub assumption_inputs: ::prost::alloc::vec::Vec<Input>,
    /// If true, client should only execute and return the journal, not generate a full proof.
    #[prost(bool, tag = "5")]
    pub execute_only: bool,
    /// Optional execution cycle limit for the ZKVM.
    #[prost(uint64, tag = "6")]
    pub exec_cycle_limit: u64,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Groth16TaskDetails {
    /// The task_id of the original STARK task that produced the receipt to be SNARKed.
    #[prost(string, tag = "1")]
    pub stark_original_task_id: ::prost::alloc::string::String,
    /// The STARK receipt bincode data.
    #[prost(bytes = "vec", tag = "2")]
    pub stark_receipt_data: ::prost::alloc::vec::Vec<u8>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTaskProgressRequest {
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
    #[prost(enumeration = "TaskStatus", tag = "2")]
    pub status: i32,
    /// Optional: human-readable status message, or error details if status is FAILED.
    #[prost(string, tag = "3")]
    pub message: ::prost::alloc::string::String,
    /// For STARK execution.
    #[prost(uint64, optional, tag = "4")]
    pub total_segments: ::core::option::Option<u64>,
    /// For STARK execution, if known upon completion of execution.
    #[prost(uint64, optional, tag = "5")]
    pub total_cycles: ::core::option::Option<u64>,
}
/// Typically empty. Could be used for server to acknowledge or send commands (e.g., cancel).
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateTaskProgressResponse {}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadStarkResultRequest {
    /// Task ID this result belongs to
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
    /// The complete STARK receipt data
    #[prost(bytes = "vec", tag = "2")]
    pub receipt_data: ::prost::alloc::vec::Vec<u8>,
    /// Optional journal data
    #[prost(bytes = "vec", tag = "3")]
    pub journal_data: ::prost::alloc::vec::Vec<u8>,
    /// Optional metadata about the proof
    #[prost(string, tag = "4")]
    pub description: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadStarkResultResponse {
    /// Confirmation that the server received and processed the upload
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error message if any
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadGroth16ResultRequest {
    /// Task ID this result belongs to
    #[prost(string, tag = "1")]
    pub task_id: ::prost::alloc::string::String,
    /// The complete Groth16 proof data
    #[prost(bytes = "vec", tag = "2")]
    pub proof_data: ::prost::alloc::vec::Vec<u8>,
    /// Optional metadata about the proof
    #[prost(string, tag = "3")]
    pub description: ::prost::alloc::string::String,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadGroth16ResultResponse {
    /// Confirmation that the server received and processed the upload
    #[prost(bool, tag = "1")]
    pub success: bool,
    /// Error message if any
    #[prost(string, tag = "2")]
    pub error_message: ::prost::alloc::string::String,
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TaskStatus {
    /// Default, should not be used.
    Unspecified = 0,
    /// Task assigned, client is preparing.
    Pending = 1,
    /// Client is generating the STARK or Groth16 proof.
    GeneratingProof = 2,
    /// Client is uploading the proof/journal.
    UploadingProof = 3,
    /// Task completed successfully by the client.
    Completed = 4,
    /// Task failed on the client.
    Failed = 5,
}
impl TaskStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "TASK_STATUS_UNSPECIFIED",
            Self::Pending => "PENDING",
            Self::GeneratingProof => "GENERATING_PROOF",
            Self::UploadingProof => "UPLOADING_PROOF",
            Self::Completed => "COMPLETED",
            Self::Failed => "FAILED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TASK_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "PENDING" => Some(Self::Pending),
            "GENERATING_PROOF" => Some(Self::GeneratingProof),
            "UPLOADING_PROOF" => Some(Self::UploadingProof),
            "COMPLETED" => Some(Self::Completed),
            "FAILED" => Some(Self::Failed),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod bento_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service for clients to request and process proving tasks.
    #[derive(Debug, Clone)]
    pub struct BentoServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BentoServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BentoServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BentoServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            BentoServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Client requests a task to execute.
        /// The server can stream tasks to the client as they become available.
        pub async fn request_task(
            &mut self,
            request: impl tonic::IntoRequest<super::RequestTaskRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::TaskAssignment>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bento.v1.BentoService/RequestTask",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("bento.v1.BentoService", "RequestTask"));
            self.inner.server_streaming(req, path, codec).await
        }
        /// Client sends a single update on the progress of a task, and server sends back instructions.
        pub async fn update_task_progress(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateTaskProgressRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateTaskProgressResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bento.v1.BentoService/UpdateTaskProgress",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("bento.v1.BentoService", "UpdateTaskProgress"));
            self.inner.unary(req, path, codec).await
        }
        /// Client uploads the resulting STARK proof and optionally the journal.
        /// Changed from streaming to unary since proofs are small
        pub async fn upload_stark_result(
            &mut self,
            request: impl tonic::IntoRequest<super::UploadStarkResultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UploadStarkResultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bento.v1.BentoService/UploadStarkResult",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("bento.v1.BentoService", "UploadStarkResult"));
            self.inner.unary(req, path, codec).await
        }
        /// Client uploads the resulting Groth16 proof.
        /// Changed from streaming to unary since proofs are small
        pub async fn upload_groth16_result(
            &mut self,
            request: impl tonic::IntoRequest<super::UploadGroth16ResultRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UploadGroth16ResultResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bento.v1.BentoService/UploadGroth16Result",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("bento.v1.BentoService", "UploadGroth16Result"));
            self.inner.unary(req, path, codec).await
        }
    }
}
