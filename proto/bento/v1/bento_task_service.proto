syntax = "proto3";

package bento.v1;

option go_package = "bento/v1/bento_service_grpc";

// --------------- Service Definition ---------------

// Service for clients to request and process proving tasks.
service BentoService {
    // Client requests a task to execute.
    // The server can stream tasks to the client as they become available.
    rpc RequestTask(RequestTaskRequest) returns (stream TaskAssignment);

    // Client sends a single update on the progress of a task, and server sends back instructions.
    rpc UpdateTaskProgress(UpdateTaskProgressRequest) returns (UpdateTaskProgressResponse);

    // Client uploads the resulting STARK proof and optionally the journal.
    // Changed from streaming to unary since proofs are small
    rpc UploadStarkResult(UploadStarkResultRequest) returns (UploadStarkResultResponse);

    // Client uploads the resulting Groth16 proof.
    // Changed from streaming to unary since proofs are small
    rpc UploadGroth16Result(UploadGroth16ResultRequest) returns (UploadGroth16ResultResponse);
}

// --------------- Common Messages ---------------

message Input {
    // Identifier for the input, e.g., a UUID or hash.
    string id = 1;
    // The actual input data.
    bytes data = 2;
}

// --------------- RequestTask Messages ---------------

message RequestTaskRequest {
    // Identifier for the client worker. Can be used for logging, metrics, or client-specific logic.
    uint64 gpu_memory = 1; // in MB
    // Future: could include client capabilities (e.g., supported proof types, CPU/GPU info, resource availability).
}

message TaskAssignment {
    // Unique ID for this specific task assignment. Client must use this ID in subsequent calls for this task.
    string task_id = 1;

    oneof task_details {
        StarkTaskDetails stark_task = 2;
        Groth16TaskDetails groth16_task = 3;
    }
    // Optional: Common fields like priority, deadlines, etc. could go here.
}

message StarkTaskDetails {
    // Identifier for the ELF image (e.g., its computed image_id).
    string image_id = 1;
    // The ELF image bytes.
    bytes elf_data = 2;

    // The primary input for the task.
    Input input_data = 3;

    // Any additional inputs required for assumptions.
    repeated Input assumption_inputs = 4;

    // If true, client should only execute and return the journal, not generate a full proof.
    bool execute_only = 5;
    // Optional execution cycle limit for the ZKVM.
    uint64 exec_cycle_limit = 6;
}

message Groth16TaskDetails {
    // The task_id of the original STARK task that produced the receipt to be SNARKed.
    string stark_original_task_id = 1;
    // The STARK receipt bincode data.
    bytes stark_receipt_data = 2;
}

// --------------- UpdateTaskProgress Messages ---------------

enum TaskStatus {
    TASK_STATUS_UNSPECIFIED = 0; // Default, should not be used.
    PENDING = 1;                 // Task assigned, client is preparing.
    GENERATING_PROOF = 2;        // Client is generating the STARK or Groth16 proof.
    UPLOADING_PROOF = 3;        // Client is uploading the proof/journal.
    COMPLETED = 4;               // Task completed successfully by the client.
    FAILED = 5;                  // Task failed on the client.
}

message UpdateTaskProgressRequest {
    string task_id = 1;
    TaskStatus status = 2;
    // Optional: human-readable status message, or error details if status is FAILED.
    string message = 3;

    optional uint64 total_segments = 4; // For STARK execution.
    optional uint64 total_cycles = 5;     // For STARK execution, if known upon completion of execution.
}

message UpdateTaskProgressResponse {
    // Typically empty. Could be used for server to acknowledge or send commands (e.g., cancel).
}

// --------------- UploadStarkResult Messages ---------------

message UploadStarkResultRequest {
    // Task ID this result belongs to
    string task_id = 1;
    
    // The complete STARK receipt data
    bytes receipt_data = 2;
    
    // Optional journal data
    bytes journal_data = 3;
    
    // Optional metadata about the proof
    string description = 4;
}

message UploadStarkResultResponse {
    // Confirmation that the server received and processed the upload
    bool success = 1;
    
    // Error message if any
    string error_message = 2;
}

// --------------- UploadGroth16Result Messages ---------------

message UploadGroth16ResultRequest {
    // Task ID this result belongs to
    string task_id = 1;
    
    // The complete Groth16 proof data
    bytes proof_data = 2;
    
    // Optional metadata about the proof
    string description = 3;
}

message UploadGroth16ResultResponse {
    // Confirmation that the server received and processed the upload
    bool success = 1;
    
    // Error message if any
    string error_message = 2;
}

