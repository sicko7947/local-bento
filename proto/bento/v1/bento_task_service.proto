syntax = "proto3";

package bento.v1;

option go_package = "github.com/sicko7947/gen/go/bento/v1;bentov1";
option java_package = "com.compliance0.bento.v1";
option java_multiple_files = true;

// --------------- Service Definition ---------------

// Service for clients to request and process proving tasks.
service BentoService {
    // Client requests a task to execute.
    // The server can stream tasks to the client as they become available.
    rpc RequestTask(RequestTaskRequest) returns (stream TaskAssignment);

    // Client sends updates on the progress of a task, and server can send instructions.
    rpc StreamTaskUpdates(stream UpdateTaskProgressRequest) returns (stream ServerInstruction);

    // Client uploads the resulting STARK proof and optionally the journal.
    rpc UploadStarkResult(stream UploadStarkResultRequest) returns (UploadStarkResultResponse);

    // Client uploads the resulting Groth16 proof (potentially in chunks).
    rpc UploadGroth16Result(stream UploadGroth16ResultRequest) returns (UploadGroth16ResultResponse);
}

// --------------- Common Messages ---------------

message Input {
    // Identifier for the input, e.g., a UUID or hash.
    string id = 1;
    // The actual input data.
    bytes data = 2;
}

// --------------- RequestTask Messages ---------------

message RequestTaskRequest {
    // Identifier for the client worker. Can be used for logging, metrics, or client-specific logic.
    int64 gpu_memory = 1; // in MB
    // Future: could include client capabilities (e.g., supported proof types, CPU/GPU info, resource availability).
}

message TaskAssignment {
    // Unique ID for this specific task assignment. Client must use this ID in subsequent calls for this task.
    string task_id = 1;

    oneof task_details {
        StarkTaskDetails stark_task = 2;
        Groth16TaskDetails groth16_task = 3;
    }
    // Optional: Common fields like priority, deadlines, etc. could go here.
}

message StarkTaskDetails {
    // Identifier for the ELF image (e.g., its computed image_id).
    string image_id = 1;
    // The ELF image bytes.
    bytes elf_data = 2;

    // The primary input for the task.
    Input input_data = 3;

    // Any additional inputs required for assumptions.
    repeated Input assumption_inputs = 4;

    // If true, client should only execute and return the journal, not generate a full proof.
    bool execute_only = 5;
    // Optional execution cycle limit for the ZKVM.
    uint64 exec_cycle_limit = 6;
}

message Groth16TaskDetails {
    // The task_id of the original STARK task that produced the receipt to be SNARKed.
    string stark_original_task_id = 1;
    // The STARK receipt bincode data.
    bytes stark_receipt_data = 2;
}

// --------------- UpdateTaskProgress Messages ---------------

enum TaskStatus {
    TASK_STATUS_UNSPECIFIED = 0; // Default, should not be used.
    PENDING = 1;                 // Task assigned, client is preparing.
    DOWNLOADING_ASSETS = 2;      // Client is downloading ELF/input/receipt (if server provided URLs instead of bytes).
    EXECUTING_VM = 3;            // Client is running the ZKVM execution.
    GENERATING_PROOF = 4;        // Client is generating the STARK or Groth16 proof.
    UPLOADING_RESULT = 5;        // Client is uploading the proof/journal.
    COMPLETED = 6;               // Task completed successfully by the client.
    FAILED = 7;                  // Task failed on the client.
}

message UpdateTaskProgressRequest {
    string task_id = 1;
    TaskStatus status = 2;
    // Optional: human-readable status message, or error details if status is FAILED.
    string message = 3;

    // Optional: progress metrics from the client, similar to SessionStats.
    // These would be relevant during EXECUTING_VM or GENERATING_PROOF stages.
    uint64 current_cycles = 4;   // For STARK execution.
    uint32 current_segments = 5; // For STARK execution.
    uint64 total_cycles = 6;     // For STARK execution, if known upon completion of execution.
}

message UpdateTaskProgressResponse {
    // Typically empty. Could be used for server to acknowledge or send commands (e.g., cancel).
}

// --------------- ServerInstruction Messages ---------------

// Message for server to send instructions to the client during a task.
message ServerInstruction {
  string task_id = 1; // The task_id this instruction pertains to.
  oneof instruction_type {
    AcknowledgeUpdate acknowledge_update = 2; // Acknowledges a client update.
    CancelTaskCommand cancel_task = 3;      // Commands the client to cancel the task.
    // Future instructions can be added here.
  }
}

message AcknowledgeUpdate {
  // Optional: could include a sequence number or specific confirmation details.
}

message CancelTaskCommand {
  string reason = 1; // Optional reason for cancellation.
}

// --------------- UploadStarkResult Messages ---------------

message UploadStarkResultRequest {
    // This message is streamed from client to server.
    // The client should first send a message containing 'metadata'.
    // Subsequent messages should contain 'data_chunk' for the file being uploaded.
    // If multiple files (e.g., receipt and then journal) are sent for the same task_id
    // over the same stream, each file should start with its own 'metadata' message.
    oneof payload {
        StarkUploadMetadata metadata = 1;
        bytes data_chunk = 2; // A chunk of the file data.
    }
}

message StarkUploadMetadata {
    string task_id = 1;
    // Describes the content of the following data_chunks, e.g., "receipt", "journal_data".
    string file_description = 2;
    // Optionally, total size of the file if known, for progress tracking.
    int64 total_file_size = 3;
}

message UploadStarkResultResponse {
    // Typically empty. Server acknowledges receipt of the full stream.
}

// --------------- UploadGroth16Result Messages ---------------

message UploadGroth16ResultRequest {
    // This message is streamed from client to server.
    // Similar to UploadStarkResultRequest, metadata first, then data_chunks.
    oneof payload {
        Groth16UploadMetadata metadata = 1;
        bytes data_chunk = 2; // A chunk of the Groth16 proof data.
    }
}

message Groth16UploadMetadata {
    string task_id = 1;
    // Describes the content, e.g., "groth16_proof".
    string file_description = 2;
    // Optionally, total size of the file if known.
    int64 total_file_size = 3;
}

message UploadGroth16ResultResponse {
    // Typically empty. Server acknowledges receipt of the full stream.
}

