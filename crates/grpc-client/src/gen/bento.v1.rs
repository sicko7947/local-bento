// This file is @generated by prost-build.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct Task {
    /// UUID of the parent job
    #[prost(string, tag = "1")]
    pub job_id: ::prost::alloc::string::String,
    /// UUID of this specific task
    #[prost(string, tag = "2")]
    pub task_id: ::prost::alloc::string::String,
    #[prost(enumeration = "TaskType", tag = "3")]
    pub task_type: i32,
    /// Contains task-specific parameters, e.g., ExecutorTaskDefinition, SnarkTaskDefinition.
    #[prost(message, optional, tag = "4")]
    pub task_definition: ::core::option::Option<::prost_types::Any>,
    /// Client and server must agree on type URLs (e.g., "type.googleapis.com/bento.v1.ExecutorTaskDefinition")
    #[prost(enumeration = "TaskStatus", tag = "5")]
    pub status: i32,
    /// List of task IDs that must complete before this one
    #[prost(string, repeated, tag = "6")]
    pub prerequisite_task_ids: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
    /// Maximum number of retries for this task
    #[prost(int32, tag = "7")]
    pub max_retries: i32,
    /// Timeout for task execution
    #[prost(int32, tag = "8")]
    pub timeout_seconds: i32,
    /// ID of the worker this task is currently assigned to
    #[prost(string, optional, tag = "9")]
    pub assigned_worker_id: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(message, optional, tag = "10")]
    pub created_at: ::core::option::Option<::prost_types::Timestamp>,
    #[prost(message, optional, tag = "11")]
    pub updated_at: ::core::option::Option<::prost_types::Timestamp>,
    /// General purpose key-value metadata (e.g., user_id, session_id)
    #[prost(map = "string, string", tag = "12")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ExecutorTaskDefinition {
    /// ELF image ID (hash)
    #[prost(string, tag = "1")]
    pub image_id: ::prost::alloc::string::String,
    /// Input data ID
    #[prost(string, tag = "2")]
    pub input_id: ::prost::alloc::string::String,
    /// Execution cycle limit
    #[prost(uint64, optional, tag = "3")]
    pub exec_limit: ::core::option::Option<u64>,
    /// Whether to profile the execution
    #[prost(bool, tag = "4")]
    pub profile_execution: bool,
    /// Corresponds to 'assume_cache' in ExecutorReq
    #[prost(bool, tag = "5")]
    pub assume_cache_hit: bool,
    /// Environment variables for execution
    #[prost(map = "string, string", tag = "6")]
    pub environment_variables: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct SnarkTaskDefinition {
    /// UUID of the STARK receipt to be converted
    #[prost(string, tag = "1")]
    pub stark_receipt_id: ::prost::alloc::string::String,
    #[prost(enumeration = "CompressionType", tag = "2")]
    pub compress_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct FinalizeTaskDefinition {
    /// The original job_id whose results are being finalized
    #[prost(string, tag = "1")]
    pub job_id_to_finalize: ::prost::alloc::string::String,
    /// From FinalizeReq
    #[prost(uint32, tag = "2")]
    pub max_idx: u32,
    /// From FinalizeReq
    #[prost(enumeration = "RollupType", tag = "3")]
    pub rollup_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ProveTaskDefinition {
    /// The job this segment belongs to
    #[prost(string, tag = "1")]
    pub job_id_for_segment: ::prost::alloc::string::String,
    #[prost(uint32, tag = "2")]
    pub segment_idx: u32,
    #[prost(enumeration = "ProveReceiptType", tag = "3")]
    pub receipt_type: i32,
}
/// GetTask Messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaskRequest {
    /// Unique identifier for the worker
    #[prost(string, tag = "1")]
    pub worker_id: ::prost::alloc::string::String,
    /// List of capabilities (e.g., "CPU_PROVER", "GPU_PROVER_CUDA", "SNARK_CIRCUIT_XYZ")
    #[prost(string, repeated, tag = "2")]
    pub worker_capabilities: ::prost::alloc::vec::Vec<::prost::alloc::string::String>,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct GetTaskResponse {
    /// The task assigned to the worker. If no task is available, this will be absent.
    #[prost(message, optional, tag = "1")]
    pub task: ::core::option::Option<Task>,
}
/// UpdateTaskStatus Messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UpdateTaskStatusRequest {
    #[prost(string, tag = "1")]
    pub job_id: ::prost::alloc::string::String,
    #[prost(string, tag = "2")]
    pub task_id: ::prost::alloc::string::String,
    #[prost(enumeration = "TaskStatus", tag = "3")]
    pub status: i32,
    /// Detailed error if status is FAILED
    #[prost(string, optional, tag = "4")]
    pub error_message: ::core::option::Option<::prost::alloc::string::String>,
    /// ID of the primary output artifact (e.g., proof_id, receipt_id)
    #[prost(string, optional, tag = "5")]
    pub result_artifact_id: ::core::option::Option<::prost::alloc::string::String>,
    /// This artifact should have been uploaded via UploadArtifact.
    ///
    /// Key-value pairs for other results or metadata (e.g., S3 URLs if not streamed)
    #[prost(map = "string, string", tag = "6")]
    pub additional_results_metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
    /// For long-running tasks to report progress (0.0 to 100.0)
    #[prost(float, optional, tag = "7")]
    pub progress_percentage: ::core::option::Option<f32>,
}
#[derive(Clone, Copy, PartialEq, ::prost::Message)]
pub struct UpdateTaskStatusResponse {
    /// Confirmation that the status update was received
    #[prost(bool, tag = "1")]
    pub acknowledged: bool,
}
/// ArtifactInfo: Metadata for an artifact, sent as the first message in an upload/download stream.
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct ArtifactInfo {
    /// Unique ID for the artifact (e.g., input_hash, image_hash, proof_uuid)
    #[prost(string, tag = "1")]
    pub artifact_id: ::prost::alloc::string::String,
    #[prost(enumeration = "ArtifactType", tag = "2")]
    pub artifact_type: i32,
    /// Original filename, if applicable
    #[prost(string, optional, tag = "3")]
    pub filename: ::core::option::Option<::prost::alloc::string::String>,
    /// Total size of the artifact, if known beforehand
    #[prost(int64, optional, tag = "4")]
    pub total_size_bytes: ::core::option::Option<i64>,
    /// Additional metadata (e.g., "job_id", "task_id" if it's a task output)
    #[prost(map = "string, string", tag = "5")]
    pub metadata: ::std::collections::HashMap<
        ::prost::alloc::string::String,
        ::prost::alloc::string::String,
    >,
}
/// UploadArtifact Messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadArtifactRequest {
    #[prost(oneof = "upload_artifact_request::Data", tags = "1, 2")]
    pub data: ::core::option::Option<upload_artifact_request::Data>,
}
/// Nested message and enum types in `UploadArtifactRequest`.
pub mod upload_artifact_request {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        /// Must be the first message in the stream
        #[prost(message, tag = "1")]
        Info(super::ArtifactInfo),
        /// Subsequent messages containing chunks of the artifact data
        #[prost(bytes, tag = "2")]
        Chunk(::prost::alloc::vec::Vec<u8>),
    }
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct UploadArtifactResponse {
    /// Confirmed ID of the uploaded artifact
    #[prost(string, tag = "1")]
    pub artifact_id: ::prost::alloc::string::String,
    /// e.g., "Upload successful"
    #[prost(string, tag = "2")]
    pub status_message: ::prost::alloc::string::String,
    /// Optional: URL where the artifact is stored (e.g., an S3 URL if the gRPC service handles final S3 upload)
    #[prost(string, optional, tag = "3")]
    pub storage_url: ::core::option::Option<::prost::alloc::string::String>,
    #[prost(int64, tag = "4")]
    pub bytes_received: i64,
}
/// DownloadArtifact Messages
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DownloadArtifactRequest {
    #[prost(string, tag = "1")]
    pub artifact_id: ::prost::alloc::string::String,
    #[prost(enumeration = "ArtifactType", tag = "2")]
    pub artifact_type: i32,
}
#[derive(Clone, PartialEq, ::prost::Message)]
pub struct DownloadArtifactResponse {
    #[prost(oneof = "download_artifact_response::Data", tags = "1, 2")]
    pub data: ::core::option::Option<download_artifact_response::Data>,
}
/// Nested message and enum types in `DownloadArtifactResponse`.
pub mod download_artifact_response {
    #[derive(Clone, PartialEq, ::prost::Oneof)]
    pub enum Data {
        /// First message in the stream, confirming artifact details
        #[prost(message, tag = "1")]
        Info(super::ArtifactInfo),
        /// Subsequent messages containing chunks of the artifact data
        #[prost(bytes, tag = "2")]
        Chunk(::prost::alloc::vec::Vec<u8>),
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TaskType {
    Unspecified = 0,
    /// Executes a RISC-V program
    Executor = 1,
    /// Converts a STARK proof to a SNARK proof
    Snark = 2,
    /// Finalizes a job, e.g., creating a rollup receipt
    Finalize = 3,
    /// Task related to segment processing
    Segment = 4,
    /// Performs a Keccak computation
    Keccak = 5,
    /// Joins two receipts
    Join = 6,
    /// Resolves a set of receipts
    Resolve = 7,
    /// Combines receipts in a union operation
    Union = 8,
    /// Generates a proof for a segment
    Prove = 9,
}
impl TaskType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "TASK_TYPE_UNSPECIFIED",
            Self::Executor => "TASK_TYPE_EXECUTOR",
            Self::Snark => "TASK_TYPE_SNARK",
            Self::Finalize => "TASK_TYPE_FINALIZE",
            Self::Segment => "TASK_TYPE_SEGMENT",
            Self::Keccak => "TASK_TYPE_KECCAK",
            Self::Join => "TASK_TYPE_JOIN",
            Self::Resolve => "TASK_TYPE_RESOLVE",
            Self::Union => "TASK_TYPE_UNION",
            Self::Prove => "TASK_TYPE_PROVE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TASK_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "TASK_TYPE_EXECUTOR" => Some(Self::Executor),
            "TASK_TYPE_SNARK" => Some(Self::Snark),
            "TASK_TYPE_FINALIZE" => Some(Self::Finalize),
            "TASK_TYPE_SEGMENT" => Some(Self::Segment),
            "TASK_TYPE_KECCAK" => Some(Self::Keccak),
            "TASK_TYPE_JOIN" => Some(Self::Join),
            "TASK_TYPE_RESOLVE" => Some(Self::Resolve),
            "TASK_TYPE_UNION" => Some(Self::Union),
            "TASK_TYPE_PROVE" => Some(Self::Prove),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum TaskStatus {
    Unspecified = 0,
    /// Task is created, dependencies not met or not scheduled
    Pending = 1,
    /// Task is ready to be picked up by a worker
    Ready = 2,
    /// Task is currently being processed
    Running = 3,
    /// Task completed successfully
    Succeeded = 4,
    /// Task failed during execution
    Failed = 5,
    /// Task was canceled
    Canceled = 6,
}
impl TaskStatus {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "TASK_STATUS_UNSPECIFIED",
            Self::Pending => "TASK_STATUS_PENDING",
            Self::Ready => "TASK_STATUS_READY",
            Self::Running => "TASK_STATUS_RUNNING",
            Self::Succeeded => "TASK_STATUS_SUCCEEDED",
            Self::Failed => "TASK_STATUS_FAILED",
            Self::Canceled => "TASK_STATUS_CANCELED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "TASK_STATUS_UNSPECIFIED" => Some(Self::Unspecified),
            "TASK_STATUS_PENDING" => Some(Self::Pending),
            "TASK_STATUS_READY" => Some(Self::Ready),
            "TASK_STATUS_RUNNING" => Some(Self::Running),
            "TASK_STATUS_SUCCEEDED" => Some(Self::Succeeded),
            "TASK_STATUS_FAILED" => Some(Self::Failed),
            "TASK_STATUS_CANCELED" => Some(Self::Canceled),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum CompressionType {
    Unspecified = 0,
    /// Add other compression types like PLONKY2 if supported
    Groth16 = 1,
}
impl CompressionType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "COMPRESSION_TYPE_UNSPECIFIED",
            Self::Groth16 => "COMPRESSION_TYPE_GROTH16",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "COMPRESSION_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "COMPRESSION_TYPE_GROTH16" => Some(Self::Groth16),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ArtifactType {
    Unspecified = 0,
    /// Input data for a task
    Input = 1,
    /// Executable ELF file
    ElfImage = 2,
    StarkReceipt = 3,
    Groth16Proof = 4,
    Groth16Receipt = 5,
    /// Execution journal
    Journal = 6,
    /// Task execution logs
    Log = 7,
    /// Preflight journal
    PreflightJournal = 8,
}
impl ArtifactType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ARTIFACT_TYPE_UNSPECIFIED",
            Self::Input => "ARTIFACT_TYPE_INPUT",
            Self::ElfImage => "ARTIFACT_TYPE_ELF_IMAGE",
            Self::StarkReceipt => "ARTIFACT_TYPE_STARK_RECEIPT",
            Self::Groth16Proof => "ARTIFACT_TYPE_GROTH16_PROOF",
            Self::Groth16Receipt => "ARTIFACT_TYPE_GROTH16_RECEIPT",
            Self::Journal => "ARTIFACT_TYPE_JOURNAL",
            Self::Log => "ARTIFACT_TYPE_LOG",
            Self::PreflightJournal => "ARTIFACT_TYPE_PREFLIGHT_JOURNAL",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ARTIFACT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "ARTIFACT_TYPE_INPUT" => Some(Self::Input),
            "ARTIFACT_TYPE_ELF_IMAGE" => Some(Self::ElfImage),
            "ARTIFACT_TYPE_STARK_RECEIPT" => Some(Self::StarkReceipt),
            "ARTIFACT_TYPE_GROTH16_PROOF" => Some(Self::Groth16Proof),
            "ARTIFACT_TYPE_GROTH16_RECEIPT" => Some(Self::Groth16Receipt),
            "ARTIFACT_TYPE_JOURNAL" => Some(Self::Journal),
            "ARTIFACT_TYPE_LOG" => Some(Self::Log),
            "ARTIFACT_TYPE_PREFLIGHT_JOURNAL" => Some(Self::PreflightJournal),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum RollupType {
    Unspecified = 0,
    Segment = 1,
    Tree = 2,
}
impl RollupType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "ROLLUP_TYPE_UNSPECIFIED",
            Self::Segment => "ROLLUP_TYPE_SEGMENT",
            Self::Tree => "ROLLUP_TYPE_TREE",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "ROLLUP_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "ROLLUP_TYPE_SEGMENT" => Some(Self::Segment),
            "ROLLUP_TYPE_TREE" => Some(Self::Tree),
            _ => None,
        }
    }
}
#[derive(Clone, Copy, Debug, PartialEq, Eq, Hash, PartialOrd, Ord, ::prost::Enumeration)]
#[repr(i32)]
pub enum ProveReceiptType {
    Unspecified = 0,
    Segment = 1,
    Lifted = 2,
}
impl ProveReceiptType {
    /// String value of the enum field names used in the ProtoBuf definition.
    ///
    /// The values are not transformed in any way and thus are considered stable
    /// (if the ProtoBuf definition does not change) and safe for programmatic use.
    pub fn as_str_name(&self) -> &'static str {
        match self {
            Self::Unspecified => "PROVE_RECEIPT_TYPE_UNSPECIFIED",
            Self::Segment => "PROVE_RECEIPT_TYPE_SEGMENT",
            Self::Lifted => "PROVE_RECEIPT_TYPE_LIFTED",
        }
    }
    /// Creates an enum from field names used in the ProtoBuf definition.
    pub fn from_str_name(value: &str) -> ::core::option::Option<Self> {
        match value {
            "PROVE_RECEIPT_TYPE_UNSPECIFIED" => Some(Self::Unspecified),
            "PROVE_RECEIPT_TYPE_SEGMENT" => Some(Self::Segment),
            "PROVE_RECEIPT_TYPE_LIFTED" => Some(Self::Lifted),
            _ => None,
        }
    }
}
/// Generated client implementations.
pub mod bento_task_service_client {
    #![allow(
        unused_variables,
        dead_code,
        missing_docs,
        clippy::wildcard_imports,
        clippy::let_unit_value,
    )]
    use tonic::codegen::*;
    use tonic::codegen::http::Uri;
    /// Service to manage tasks and artifacts for the Bento Proving System.
    #[derive(Debug, Clone)]
    pub struct BentoTaskServiceClient<T> {
        inner: tonic::client::Grpc<T>,
    }
    impl BentoTaskServiceClient<tonic::transport::Channel> {
        /// Attempt to create a new client by connecting to a given endpoint.
        pub async fn connect<D>(dst: D) -> Result<Self, tonic::transport::Error>
        where
            D: TryInto<tonic::transport::Endpoint>,
            D::Error: Into<StdError>,
        {
            let conn = tonic::transport::Endpoint::new(dst)?.connect().await?;
            Ok(Self::new(conn))
        }
    }
    impl<T> BentoTaskServiceClient<T>
    where
        T: tonic::client::GrpcService<tonic::body::Body>,
        T::Error: Into<StdError>,
        T::ResponseBody: Body<Data = Bytes> + std::marker::Send + 'static,
        <T::ResponseBody as Body>::Error: Into<StdError> + std::marker::Send,
    {
        pub fn new(inner: T) -> Self {
            let inner = tonic::client::Grpc::new(inner);
            Self { inner }
        }
        pub fn with_origin(inner: T, origin: Uri) -> Self {
            let inner = tonic::client::Grpc::with_origin(inner, origin);
            Self { inner }
        }
        pub fn with_interceptor<F>(
            inner: T,
            interceptor: F,
        ) -> BentoTaskServiceClient<InterceptedService<T, F>>
        where
            F: tonic::service::Interceptor,
            T::ResponseBody: Default,
            T: tonic::codegen::Service<
                http::Request<tonic::body::Body>,
                Response = http::Response<
                    <T as tonic::client::GrpcService<tonic::body::Body>>::ResponseBody,
                >,
            >,
            <T as tonic::codegen::Service<
                http::Request<tonic::body::Body>,
            >>::Error: Into<StdError> + std::marker::Send + std::marker::Sync,
        {
            BentoTaskServiceClient::new(InterceptedService::new(inner, interceptor))
        }
        /// Compress requests with the given encoding.
        ///
        /// This requires the server to support it otherwise it might respond with an
        /// error.
        #[must_use]
        pub fn send_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.send_compressed(encoding);
            self
        }
        /// Enable decompressing responses.
        #[must_use]
        pub fn accept_compressed(mut self, encoding: CompressionEncoding) -> Self {
            self.inner = self.inner.accept_compressed(encoding);
            self
        }
        /// Limits the maximum size of a decoded message.
        ///
        /// Default: `4MB`
        #[must_use]
        pub fn max_decoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_decoding_message_size(limit);
            self
        }
        /// Limits the maximum size of an encoded message.
        ///
        /// Default: `usize::MAX`
        #[must_use]
        pub fn max_encoding_message_size(mut self, limit: usize) -> Self {
            self.inner = self.inner.max_encoding_message_size(limit);
            self
        }
        /// Worker requests a task to execute.
        /// The server will attempt to assign a suitable task based on worker capabilities.
        pub async fn get_task(
            &mut self,
            request: impl tonic::IntoRequest<super::GetTaskRequest>,
        ) -> std::result::Result<
            tonic::Response<super::GetTaskResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bento.v1.BentoTaskService/GetTask",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("bento.v1.BentoTaskService", "GetTask"));
            self.inner.unary(req, path, codec).await
        }
        /// Worker updates the status of an assigned task.
        pub async fn update_task_status(
            &mut self,
            request: impl tonic::IntoRequest<super::UpdateTaskStatusRequest>,
        ) -> std::result::Result<
            tonic::Response<super::UpdateTaskStatusResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bento.v1.BentoTaskService/UpdateTaskStatus",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("bento.v1.BentoTaskService", "UpdateTaskStatus"),
                );
            self.inner.unary(req, path, codec).await
        }
        /// Worker uploads an artifact (e.g., input, ELF image, proof, receipt) via a client-side stream.
        /// The first message in the stream must be ArtifactInfo, followed by data chunks.
        pub async fn upload_artifact(
            &mut self,
            request: impl tonic::IntoStreamingRequest<
                Message = super::UploadArtifactRequest,
            >,
        ) -> std::result::Result<
            tonic::Response<super::UploadArtifactResponse>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bento.v1.BentoTaskService/UploadArtifact",
            );
            let mut req = request.into_streaming_request();
            req.extensions_mut()
                .insert(GrpcMethod::new("bento.v1.BentoTaskService", "UploadArtifact"));
            self.inner.client_streaming(req, path, codec).await
        }
        /// Worker downloads an artifact (e.g., input, ELF image, receipt) via a server-side stream.
        /// The first message in the stream will be ArtifactInfo, followed by data chunks.
        pub async fn download_artifact(
            &mut self,
            request: impl tonic::IntoRequest<super::DownloadArtifactRequest>,
        ) -> std::result::Result<
            tonic::Response<tonic::codec::Streaming<super::DownloadArtifactResponse>>,
            tonic::Status,
        > {
            self.inner
                .ready()
                .await
                .map_err(|e| {
                    tonic::Status::unknown(
                        format!("Service was not ready: {}", e.into()),
                    )
                })?;
            let codec = tonic::codec::ProstCodec::default();
            let path = http::uri::PathAndQuery::from_static(
                "/bento.v1.BentoTaskService/DownloadArtifact",
            );
            let mut req = request.into_request();
            req.extensions_mut()
                .insert(
                    GrpcMethod::new("bento.v1.BentoTaskService", "DownloadArtifact"),
                );
            self.inner.server_streaming(req, path, codec).await
        }
    }
}
